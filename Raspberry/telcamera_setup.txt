 üöÄ Avvio automatico di cam-1.py con Pi Camera

Due obiettivi:

1. Far funzionare cv2.VideoCapture(0) anche con la Pi Cam CSI
2. Lanciare cam-1.py al boot usando systemd

---

 1Ô∏è‚É£ Abilitare il driver ‚Äúlegacy‚Äù della Pi Camera

Di default Bullseye usa libcamera, ma puoi riattivare il driver V4L2 ‚Äúlegacy‚Äù per continuare a chiamare:

python
cap = cv2.VideoCapture(0)


1. Apri il tool di configurazione:

   bash
   sudo raspi-config
   
2. Vai in Interface Options ‚Üí Legacy Camera
3. Seleziona Enable
4. Riavvia:

   bash
   sudo reboot
   

D‚Äôora in poi la tua Pi Cam sar√† visibile come /dev/video0 e VideoCapture(0) funzioner√† senza cambi al codice üì∏

---

 2Ô∏è‚É£ Eseguire cam-1.py all‚Äôavvio con systemd

Il modo pi√π robusto per far partire il tuo script ad ogni boot, con log dedicati e restart in caso di crash.

 üîß 2.1 Prepara lo script

 Posiziona cam-1.py in /home/pi/
 In testa aggiungi la shebang:

  python
  !/usr/bin/env python3
  
 Rendi eseguibile:

  bash
  chmod +x /home/pi/cam-1.py
  

---

 üìú 2.2 Crea il servizio

Apri un nuovo file di unit√†:

bash
sudo nano /etc/systemd/system/cam1.service


Incolla questo contenuto:

ini
[Unit]
Description=üì∑ Avvio automatico di cam-1.py
After=network.target

[Service]
Type=simple
User=pi
WorkingDirectory=/home/pi
ExecStart=/usr/bin/env python3 /home/pi/cam-1.py
Restart=on-failure
RestartSec=5s

[Install]
WantedBy=multi-user.target


> ‚ö†Ô∏è Note:
>
>  User=pi: esegue il servizio con l‚Äôutente ‚Äúpi‚Äù. Cambialo se serve.
>  After=network.target: assicura che la rete sia operativa (utile per le chiamate HTTP).

Salva e chiudi (Ctrl+O, Invio, Ctrl+X).

---

 ‚ñ∂Ô∏è 2.3 Abilita e avvia

1. Ricarica systemd:

   bash
   sudo systemctl daemon-reload
   
2. Fai partire lo script al boot:

   bash
   sudo systemctl enable cam1.service
   
3. (Opzionale) Avvialo subito per test:

   bash
   sudo systemctl start cam1.service
   

Verifica lo stato:

bash
sudo systemctl status cam1.service


E segui i log in tempo reale:

bash
journalctl -u cam1.service -f


---

 üèéÔ∏è Alternative ‚Äúveloci‚Äù

 /etc/rc.local
  Inserisci prima di exit 0:

  bash
  /usr/bin/env python3 /home/pi/cam-1.py &
  

  Semplice, ma privo di log centralizzati e restart automatico.

 cron @reboot
  Con crontab -e (utente pi):

  
  @reboot /usr/bin/env python3 /home/pi/cam-1.py
  

  Facile, ma senza dipendenze n√© gestione dei fallimenti.

---

üéâ Fatto!
Al prossimo riavvio la tua Pi monter√† la camera legacy e lancer√† automaticamente cam-1.py come servizio di sistema.
